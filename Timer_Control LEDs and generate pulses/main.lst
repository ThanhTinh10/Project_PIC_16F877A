CCS PCM C Compiler, Version 5.015, 5967               01-Thg6-23 21:56

               Filename:   C:\Users\Administrator\Documents\project_pic\Control LEDs and generate pulses according to requirements using Timer 0 and Timer 1\main.lst

               ROM used:   212 words (3%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           18 (5%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   057
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
.................... #use delay(clock=20000000) 
.................... #byte TRISD = 0x88 
.................... #byte PORTD = 0x08 
.................... int1 TTD2; 
.................... int count; 
.................... #int_timer0 
.................... void interrupt_timer0() 
.................... { 
.................... set_timer0(6); 
002F:  MOVLW  06
0030:  MOVWF  01
.................... ++count; 
0031:  INCF   28,F
.................... if(count == 157 &&  TTD2 == TRUE ) 
0032:  MOVF   28,W
0033:  SUBLW  9D
0034:  BTFSS  03.2
0035:  GOTO   043
0036:  BTFSS  27.0
0037:  GOTO   043
.................... { 
.................... count=0; 
0038:  CLRF   28
.................... output_high(PIN_D3); 
0039:  BSF    03.5
003A:  BCF    08.3
003B:  BCF    03.5
003C:  BSF    08.3
.................... output_low(PIN_D2); 
003D:  BSF    03.5
003E:  BCF    08.2
003F:  BCF    03.5
0040:  BCF    08.2
.................... TTD2 = FALSE; 
0041:  BCF    27.0
.................... } 
0042:  GOTO   053
.................... else if(count == 157 &&  TTD2 == FALSE ) 
0043:  MOVF   28,W
0044:  SUBLW  9D
0045:  BTFSS  03.2
0046:  GOTO   053
0047:  BTFSC  27.0
0048:  GOTO   053
.................... { 
.................... count=0; 
0049:  CLRF   28
.................... output_high(PIN_D2); 
004A:  BSF    03.5
004B:  BCF    08.2
004C:  BCF    03.5
004D:  BSF    08.2
.................... output_low(PIN_D3); 
004E:  BSF    03.5
004F:  BCF    08.3
0050:  BCF    03.5
0051:  BCF    08.3
.................... TTD2 = TRUE; 
0052:  BSF    27.0
.................... } 
0053:  BCF    0B.2
0054:  BCF    0A.3
0055:  BCF    0A.4
0056:  GOTO   01B
.................... } 
....................  
....................  
....................  
.................... void main() 
0057:  MOVF   03,W
0058:  ANDLW  1F
0059:  MOVWF  03
005A:  BSF    03.5
005B:  BSF    1F.0
005C:  BSF    1F.1
005D:  BSF    1F.2
005E:  BCF    1F.3
005F:  MOVLW  07
0060:  MOVWF  1C
0061:  BCF    03.7
.................... {   
....................  
....................    int1  TTD1; 
....................    
....................    TRISD=0;  
0062:  CLRF   08
....................    enable_interrupts(global); 
0063:  MOVLW  C0
0064:  BCF    03.5
0065:  IORWF  0B,F
....................    enable_interrupts(int_timer0); 
0066:  BSF    0B.5
....................    setup_timer_0 (RTCC_INTERNAL|RTCC_DIV_128); 
0067:  BSF    03.5
0068:  MOVF   01,W
0069:  ANDLW  C0
006A:  IORLW  06
006B:  MOVWF  01
....................    setup_timer_1( T1_INTERNAL| T1_DIV_BY_1 ); 
006C:  MOVLW  85
006D:  BCF    03.5
006E:  MOVWF  10
....................     
....................    set_timer0(0); 
006F:  CLRF   01
....................    set_timer1(0); 
0070:  CLRF   0E
0071:  CLRF   0F
0072:  CLRF   0E
....................    output_high(PIN_D0); 
0073:  BSF    03.5
0074:  BCF    08.0
0075:  BCF    03.5
0076:  BSF    08.0
....................    output_high(PIN_D1); 
0077:  BSF    03.5
0078:  BCF    08.1
0079:  BCF    03.5
007A:  BSF    08.1
....................    count = 0; 
007B:  CLRF   28
....................    TTD1= TRUE; 
007C:  BSF    29.0
....................   
....................  
....................    while(TRUE) 
....................    { 
....................        
....................      if(get_timer1()>5000 & TTD1==TRUE) 
007D:  MOVF   0F,W
007E:  MOVWF  7A
007F:  MOVF   0E,W
0080:  MOVWF  77
0081:  MOVF   0F,W
0082:  SUBWF  7A,W
0083:  BTFSS  03.2
0084:  GOTO   07D
0085:  MOVF   77,W
0086:  MOVWF  2A
0087:  MOVF   7A,W
0088:  MOVWF  2B
0089:  MOVF   2B,W
008A:  SUBLW  12
008B:  BTFSC  03.0
008C:  GOTO   094
008D:  XORLW  FF
008E:  BTFSS  03.2
008F:  GOTO   096
0090:  MOVF   2A,W
0091:  SUBLW  88
0092:  BTFSS  03.0
0093:  GOTO   096
0094:  MOVLW  00
0095:  GOTO   097
0096:  MOVLW  01
0097:  MOVWF  2A
0098:  MOVLW  00
0099:  BTFSC  29.0
009A:  MOVLW  01
009B:  ANDWF  2A,W
009C:  XORLW  00
009D:  BTFSC  03.2
009E:  GOTO   0A8
....................      { 
....................          set_timer1(0); 
009F:  CLRF   0E
00A0:  CLRF   0F
00A1:  CLRF   0E
....................          output_low(PIN_D1); 
00A2:  BSF    03.5
00A3:  BCF    08.1
00A4:  BCF    03.5
00A5:  BCF    08.1
....................          TTD1=FALSE; 
00A6:  BCF    29.0
....................      
....................      } 
00A7:  GOTO   0D2
....................      else if(get_timer1()>10000 & TTD1==FALSE) 
00A8:  MOVF   0F,W
00A9:  MOVWF  7A
00AA:  MOVF   0E,W
00AB:  MOVWF  77
00AC:  MOVF   0F,W
00AD:  SUBWF  7A,W
00AE:  BTFSS  03.2
00AF:  GOTO   0A8
00B0:  MOVF   77,W
00B1:  MOVWF  2A
00B2:  MOVF   7A,W
00B3:  MOVWF  2B
00B4:  MOVF   2B,W
00B5:  SUBLW  26
00B6:  BTFSC  03.0
00B7:  GOTO   0BF
00B8:  XORLW  FF
00B9:  BTFSS  03.2
00BA:  GOTO   0C1
00BB:  MOVF   2A,W
00BC:  SUBLW  10
00BD:  BTFSS  03.0
00BE:  GOTO   0C1
00BF:  MOVLW  00
00C0:  GOTO   0C2
00C1:  MOVLW  01
00C2:  MOVWF  2A
00C3:  MOVLW  00
00C4:  BTFSS  29.0
00C5:  MOVLW  01
00C6:  ANDWF  2A,W
00C7:  XORLW  00
00C8:  BTFSC  03.2
00C9:  GOTO   0D2
....................      { 
....................          set_timer1(0); 
00CA:  CLRF   0E
00CB:  CLRF   0F
00CC:  CLRF   0E
....................          output_high(PIN_D1); 
00CD:  BSF    03.5
00CE:  BCF    08.1
00CF:  BCF    03.5
00D0:  BSF    08.1
....................          TTD1=TRUE; 
00D1:  BSF    29.0
....................     
....................      } 
00D2:  GOTO   07D
....................    
.................... } 
.................... } 
00D3:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
